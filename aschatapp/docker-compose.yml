services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - chat_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3

  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - chat_network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure
        max_attempts: 3

  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${CELERY_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${CELERY_PASSWORD}
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - chat_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    restart: unless-stopped
    depends_on:
      - django
      - fastapi
    ports:
      - "80:80"
    networks:
      - chat_network
    volumes:
      - django_static:/app/static
      - django_media:/app/media
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  django:
    build:
      context: .
      dockerfile: Dockerfile.django
    restart: always
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - chat_network
    volumes:
      - .:/app
      - django_static:/app/static
      - django_media:/app/media
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        max_attempts: 3

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - redis
    networks:
      - chat_network
    volumes:
      - fastapi_logs:/app/logs
    ports:
      - "8001:8001"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3

  celery:
    build:
      context: .
      dockerfile: Dockerfile.django
    command: celery -A aschatapp.celery worker --loglevel=info --concurrency=4
    restart: unless-stopped
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
    depends_on:
      - rabbitmq
      - django
      - redis
    networks:
      - chat_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    networks:
      - chat_network
    depends_on:
      - db
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  chat_network:
    driver: bridge

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  django_static:
    driver: local
  django_media:
    driver: local
  react_static:
    driver: local
  fastapi_logs:
    driver: local
